{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "damg7370spring25adf"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"NYPD_OUPUT_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'NYPD_OUPUT'"
		},
		"Snowflake1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'Snowflake1'"
		},
		"Snowflake2_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'Snowflake2'"
		},
		"ls_snowflake_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_snowflake'"
		},
		"AzureBlobStorage1_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'AzureBlobStorage1'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://spring2025damg7370.dfs.core.windows.net/"
		},
		"AzureDataLakeStorage_LS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://spring2025damg7370.dfs.core.windows.net/"
		},
		"AzureKeyVault_LS_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://damg7370spring2025.vault.azure.net/"
		},
		"NYPD_OUPUT_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "NYPD_DB"
		},
		"NYPD_OUPUT_properties_typeProperties_role": {
			"type": "string",
			"defaultValue": "TEMP_ROLE"
		},
		"Snowflake1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "PET_DB"
		},
		"Snowflake1_properties_typeProperties_role": {
			"type": "string",
			"defaultValue": "PET_ROLE"
		},
		"Snowflake2_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "PET_DB"
		},
		"Snowflake2_properties_typeProperties_role": {
			"type": "string",
			"defaultValue": "PET_ROLE"
		},
		"ls_snowflake_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "TEMP_DB"
		},
		"ls_snowflake_properties_typeProperties_role": {
			"type": "string",
			"defaultValue": "TEMP_ROLE"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_TSV_2_Parquet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Park_2_Snowflake",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Tsv_2_Parquet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"additionalColumns": [
									{
										"name": "job_id",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "job_load_date",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "SnowflakeV2Sink",
								"importSettings": {
									"type": "SnowflakeImportCopyCommand"
								}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage1",
									"type": "LinkedServiceReference"
								},
								"path": "stagingcontainer"
							}
						},
						"inputs": [
							{
								"referenceName": "Parquet1",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@variables('myFileName')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "SnowflakeTable1",
								"type": "DatasetReference",
								"parameters": {
									"PET_SCHEMA": "PET_SCHEMA",
									"PET_TABLE": "PET_LICENSE_STAGE"
								}
							}
						]
					},
					{
						"name": "Tsv_2_Parquet",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "License Issue Date",
											"type": "String"
										},
										"sink": {
											"name": "License Issue Date",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "License Number",
											"type": "String"
										},
										"sink": {
											"name": "License Number",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Animal's Name",
											"type": "String"
										},
										"sink": {
											"name": "Animal's Name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Species",
											"type": "String"
										},
										"sink": {
											"name": "Species",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Primary Breed",
											"type": "String"
										},
										"sink": {
											"name": "Primary Breed",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Secondary Breed",
											"type": "String"
										},
										"sink": {
											"name": "Secondary Breed",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ZIP Code",
											"type": "String"
										},
										"sink": {
											"name": "ZIP Code",
											"type": "String"
										}
									}
								]
							}
						},
						"outputs": [
							{
								"referenceName": "Parquet1",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@variables('myFileName')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"myFileName": {
						"type": "String",
						"defaultValue": "pet_lic_data.parquet"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Parquet1')]",
				"[concat(variables('factoryId'), '/datasets/SnowflakeTable1')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pet_lic_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CleanPetLicData",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Pet_Lic_DataFlow",
								"type": "DataFlowReference",
								"parameters": {
									"Job_ID": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"FileSource": {},
									"PetSinkSnowflake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Breed_DataFlow",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "CleanPetLicData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Breed_Dim_DataFlow",
								"type": "DataFlowReference",
								"parameters": {
									"JOB_ID": {
										"value": "'@{substring(pipeline().RunId, 1,10)}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"BREEDDIM": {},
									"BREEDDIM2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Fact_DataFlow",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Location_Data_Flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FullDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sourceLocation": {},
									"sourceBreed": {},
									"sourceDate": {},
									"sourceFact": {},
									"sink1": {}
								},
								"linkedServiceParameters": {}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Location_Data_Flow",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Breed_DataFlow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LOCATION_DIM",
								"type": "DataFlowReference",
								"parameters": {
									"DI_JOB_ID": "uuid()"
								},
								"datasetParameters": {
									"SourceGeoFile": {},
									"sinkLocationDIM": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Job_ID": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Pet_Lic_DataFlow')]",
				"[concat(variables('factoryId'), '/dataflows/Breed_Dim_DataFlow')]",
				"[concat(variables('factoryId'), '/dataflows/FullDataFlow')]",
				"[concat(variables('factoryId'), '/dataflows/LOCATION_DIM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SingleProject')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"Output": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Seattle_Pet_Licenses_new.tsv",
						"fileSystem": "bronze"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "NYPD_Arrest_Data__Year_to_Date__20250208.csv",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ARREST_KEY",
						"type": "String"
					},
					{
						"name": "ARREST_DATE",
						"type": "String"
					},
					{
						"name": "PD_CD",
						"type": "String"
					},
					{
						"name": "PD_DESC",
						"type": "String"
					},
					{
						"name": "KY_CD",
						"type": "String"
					},
					{
						"name": "OFNS_DESC",
						"type": "String"
					},
					{
						"name": "LAW_CODE",
						"type": "String"
					},
					{
						"name": "LAW_CAT_CD",
						"type": "String"
					},
					{
						"name": "ARREST_BORO",
						"type": "String"
					},
					{
						"name": "ARREST_PRECINCT",
						"type": "String"
					},
					{
						"name": "JURISDICTION_CODE",
						"type": "String"
					},
					{
						"name": "AGE_GROUP",
						"type": "String"
					},
					{
						"name": "PERP_SEX",
						"type": "String"
					},
					{
						"name": "PERP_RACE",
						"type": "String"
					},
					{
						"name": "X_COORD_CD",
						"type": "String"
					},
					{
						"name": "Y_COORD_CD",
						"type": "String"
					},
					{
						"name": "Latitude",
						"type": "String"
					},
					{
						"name": "Longitude",
						"type": "String"
					},
					{
						"name": "New Georeferenced Column",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText_PetDataFlow')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Seattle_Pet_Licenses_20250215.tsv",
						"fileSystem": "bronze"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "License Issue Date\tLicense Number\tAnimal's Name\tSpecies\tPrimary Breed\tSecondary Breed\tZIP Code",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LocationDelimetedText')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "geo-data.csv",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "state_fips",
						"type": "String"
					},
					{
						"name": "state",
						"type": "String"
					},
					{
						"name": "state_abbr",
						"type": "String"
					},
					{
						"name": "zipcode",
						"type": "String"
					},
					{
						"name": "county",
						"type": "String"
					},
					{
						"name": "city",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NYPD')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "NYPD_OUPUT",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [
					{
						"name": "ARREST_KEY",
						"type": "VARCHAR"
					},
					{
						"name": "ARREST_DATE",
						"type": "VARCHAR"
					},
					{
						"name": "PD_CD",
						"type": "VARCHAR"
					},
					{
						"name": "PD_DESC",
						"type": "VARCHAR"
					},
					{
						"name": "KY_CD",
						"type": "VARCHAR"
					},
					{
						"name": "OFFENSE_DESCRIPTION",
						"type": "VARCHAR"
					},
					{
						"name": "LAW_CODE",
						"type": "VARCHAR"
					},
					{
						"name": "LAW_CAT_CD",
						"type": "VARCHAR"
					},
					{
						"name": "BOROUGH",
						"type": "VARCHAR"
					},
					{
						"name": "PRECINCT",
						"type": "VARCHAR"
					},
					{
						"name": "JURISDICTION_CODE",
						"type": "VARCHAR"
					},
					{
						"name": "AGE_GROUP",
						"type": "VARCHAR"
					},
					{
						"name": "SEX",
						"type": "VARCHAR"
					},
					{
						"name": "RACE",
						"type": "VARCHAR"
					},
					{
						"name": "X_COORD",
						"type": "VARCHAR"
					},
					{
						"name": "Y_COORD",
						"type": "VARCHAR"
					},
					{
						"name": "LATITUDE",
						"type": "VARCHAR"
					},
					{
						"name": "LONGITUDE",
						"type": "VARCHAR"
					},
					{
						"name": "NEW_GEOREFERENCED_ID",
						"type": "VARCHAR"
					},
					{
						"name": "DT_JOB_ID",
						"type": "VARCHAR"
					},
					{
						"name": "DT_JOB_DATE",
						"type": "DATE"
					}
				],
				"typeProperties": {
					"schema": "NYPD_SCHEMA",
					"table": "NYPD_STAGE_TABLE"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/NYPD_OUPUT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Seattle_Pet_Licenses_new.tsv",
						"fileSystem": "bronze"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Snowflake1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"PET_SCHEMA": {
						"type": "string"
					},
					"PET_TABLE": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().PET_SCHEMA",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().PET_TABLE",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Snowflake1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Snowflake2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [
					{
						"name": "DT",
						"type": "DATE"
					},
					{
						"name": "ABRV_DAY_NAME",
						"type": "VARCHAR"
					},
					{
						"name": "MONTH_NAME",
						"type": "VARCHAR"
					},
					{
						"name": "START_DAY_OF_MONTH",
						"type": "DATE"
					},
					{
						"name": "END_DAY_OF_MONTH",
						"type": "DATE"
					},
					{
						"name": "QUARTER_NUM",
						"type": "NUMBER",
						"precision": 2,
						"scale": 0
					},
					{
						"name": "DAY_OF_WEEK",
						"type": "NUMBER",
						"precision": 2,
						"scale": 0
					},
					{
						"name": "IS_WEEKEND",
						"type": "NUMBER",
						"precision": 1,
						"scale": 0
					},
					{
						"name": "YEAR_NUM",
						"type": "NUMBER",
						"precision": 4,
						"scale": 0
					},
					{
						"name": "MONTH_NUM",
						"type": "NUMBER",
						"precision": 2,
						"scale": 0
					},
					{
						"name": "DAY_NUM",
						"type": "NUMBER",
						"precision": 2,
						"scale": 0
					},
					{
						"name": "DATE_DIM_SK",
						"type": "VARCHAR"
					}
				],
				"typeProperties": {
					"schema": "PET_SCHEMA",
					"table": "DATE_DIM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Snowflake2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeTable_Breed')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Snowflake2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [
					{
						"name": "BREED_SK",
						"type": "NUMBER",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "START_DT",
						"type": "DATE"
					},
					{
						"name": "END_DT",
						"type": "DATE"
					},
					{
						"name": "IS_CURRENT",
						"type": "NUMBER",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "BREED_DK",
						"type": "NUMBER",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "SPECIES_NAME",
						"type": "VARCHAR"
					},
					{
						"name": "PRIMARY_BREED_NAME",
						"type": "VARCHAR"
					},
					{
						"name": "SECONDARY_BREED_NAME",
						"type": "VARCHAR"
					},
					{
						"name": "DI_JOB_ID",
						"type": "VARCHAR"
					},
					{
						"name": "DI_LOAD_DT",
						"type": "DATE"
					}
				],
				"typeProperties": {
					"schema": "PET_SCHEMA",
					"table": "BREED_DIM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Snowflake2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeTable_Location')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Snowflake2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [
					{
						"name": "LOCATION_SK",
						"type": "NUMBER",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "STATE",
						"type": "VARCHAR"
					},
					{
						"name": "STATE_ABBR",
						"type": "VARCHAR"
					},
					{
						"name": "ZIP_CODE",
						"type": "VARCHAR"
					},
					{
						"name": "CITY",
						"type": "VARCHAR"
					},
					{
						"name": "DI_JOB_ID",
						"type": "VARCHAR"
					},
					{
						"name": "DI_LOAD_DT",
						"type": "DATE"
					}
				],
				"typeProperties": {
					"schema": "PET_SCHEMA",
					"table": "LOCATION_DIM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Snowflake2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeTable_Pet_Dataflow')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Snowflake1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [
					{
						"name": "LICENSE_ISSUE_DATE",
						"type": "DATE"
					},
					{
						"name": "LICENSE_NUMBER",
						"type": "VARCHAR"
					},
					{
						"name": "ANIMAL_NAME",
						"type": "VARCHAR"
					},
					{
						"name": "SPECIES",
						"type": "VARCHAR"
					},
					{
						"name": "PRIMARY_BREED",
						"type": "VARCHAR"
					},
					{
						"name": "SECONDARY_BREED",
						"type": "VARCHAR"
					},
					{
						"name": "ZIP_CODE",
						"type": "VARCHAR"
					},
					{
						"name": "DI_JOB_ID",
						"type": "VARCHAR"
					},
					{
						"name": "DI_LOAD_DT",
						"type": "DATE"
					}
				],
				"typeProperties": {
					"schema": "PET_SCHEMA",
					"table": "V2_PET_LICENSE_STAGE"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Snowflake1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('AzureBlobStorage1_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "adf access to my storage containers",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage_LS_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Access my key vault from Azure Data Factory",
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault_LS_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/NYPD_OUPUT')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SnowflakeV2",
				"typeProperties": {
					"authenticationType": "Basic",
					"accountIdentifier": "tc74912.canada-central.azure",
					"user": "TEMP_USER",
					"database": "[parameters('NYPD_OUPUT_properties_typeProperties_database')]",
					"warehouse": "NYPD_WH",
					"role": "[parameters('NYPD_OUPUT_properties_typeProperties_role')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('NYPD_OUPUT_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Snowflake1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SnowflakeV2",
				"typeProperties": {
					"authenticationType": "Basic",
					"accountIdentifier": "tc74912.canada-central.azure",
					"user": "PET_USER",
					"database": "[parameters('Snowflake1_properties_typeProperties_database')]",
					"warehouse": "PET_WH",
					"role": "[parameters('Snowflake1_properties_typeProperties_role')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('Snowflake1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Snowflake2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SnowflakeV2",
				"typeProperties": {
					"authenticationType": "Basic",
					"accountIdentifier": "tc74912.canada-central.azure",
					"user": "PET_USER",
					"database": "[parameters('Snowflake2_properties_typeProperties_database')]",
					"warehouse": "PET_WH",
					"role": "[parameters('Snowflake2_properties_typeProperties_role')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('Snowflake2_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_snowflake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SnowflakeV2",
				"typeProperties": {
					"authenticationType": "Basic",
					"accountIdentifier": "tc74912.canada-central.azure",
					"user": "TEMP_USER",
					"database": "[parameters('ls_snowflake_properties_typeProperties_database')]",
					"warehouse": "TEMP_WH",
					"role": "[parameters('ls_snowflake_properties_typeProperties_role')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_snowflake_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Breed_Dim_DataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SnowflakeTable_Pet_Dataflow",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "SnowflakeTable_Breed",
								"type": "DatasetReference"
							},
							"name": "BREEDDIM"
						},
						{
							"dataset": {
								"referenceName": "SnowflakeTable_Breed",
								"type": "DatasetReference"
							},
							"name": "BREEDDIM2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SnowflakeTable_Breed",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "join2"
						},
						{
							"name": "filter1"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     JOB_ID as string (DI_JOB_ID)",
						"}",
						"source(output(",
						"          LICENSE_ISSUE_DATE as date,",
						"          LICENSE_NUMBER as string,",
						"          ANIMAL_NAME as string,",
						"          SPECIES as string,",
						"          PRIMARY_BREED as string,",
						"          SECONDARY_BREED as string,",
						"          ZIP_CODE as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> source1",
						"source(output(",
						"          MAXBREEDSK as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: 'SELECT NVL(MAX(BREED_SK),0) as MaxBreedSK FROM PET_SCHEMA.BREED_DIM',",
						"     format: 'query') ~> BREEDDIM",
						"source(output(",
						"          BREED_SK as string,",
						"          START_DT as string,",
						"          END_DT as string,",
						"          IS_CURRENT as string,",
						"          BREED_DK as string,",
						"          SPECIES_NAME as string,",
						"          PRIMARY_BREED_NAME as string,",
						"          SECONDARY_BREED_NAME as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> BREEDDIM2",
						"source1, BREEDDIM join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 aggregate(groupBy(SPECIES,",
						"          PRIMARY_BREED,",
						"          SECONDARY_BREED,",
						"          MAXBREEDSK),",
						"     COUNT_ROW = count(LICENSE_NUMBER)) ~> aggregate1",
						"aggregate1, BREEDDIM2 join(PRIMARY_BREED == PRIMARY_BREED_NAME",
						"     && SECONDARY_BREED == SECONDARY_BREED_NAME",
						"     && SPECIES == SPECIES_NAME,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 filter(isNull(SPECIES_NAME)&&isNull(PRIMARY_BREED_NAME)&&isNull(SECONDARY_BREED_NAME)) ~> filter1",
						"filter1 keyGenerate(output(ROW_NUM as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(BREED_SK = MAXBREEDSK + ROW_NUM,",
						"          DI_LOAD_DT = currentTimestamp(),",
						"          DI_JOB_ID = DI_JOB_ID) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          BREED_SK as string,",
						"          START_DT as string,",
						"          END_DT as string,",
						"          IS_CURRENT as string,",
						"          BREED_DK as string,",
						"          SPECIES_NAME as string,",
						"          PRIMARY_BREED_NAME as string,",
						"          SECONDARY_BREED_NAME as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     stageInsert: true,",
						"     mapColumn(",
						"          BREED_SK,",
						"          START_DT,",
						"          END_DT,",
						"          IS_CURRENT,",
						"          BREED_DK,",
						"          SPECIES_NAME,",
						"          PRIMARY_BREED_NAME,",
						"          SECONDARY_BREED_NAME,",
						"          DI_JOB_ID,",
						"          DI_LOAD_DT",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SnowflakeTable_Pet_Dataflow')]",
				"[concat(variables('factoryId'), '/datasets/SnowflakeTable_Breed')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FullDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SnowflakeTable_Pet_Dataflow",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "SnowflakeTable_Location",
								"type": "DatasetReference"
							},
							"name": "sourceLocation"
						},
						{
							"dataset": {
								"referenceName": "SnowflakeTable_Breed",
								"type": "DatasetReference"
							},
							"name": "sourceBreed"
						},
						{
							"dataset": {
								"referenceName": "SnowflakeTable2",
								"type": "DatasetReference"
							},
							"name": "sourceDate"
						},
						{
							"dataset": {
								"referenceName": "SnowflakeTable3",
								"type": "DatasetReference"
							},
							"name": "sourceFact"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SnowflakeTable3",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "join3"
						},
						{
							"name": "join4"
						},
						{
							"name": "select1"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          LICENSE_ISSUE_DATE as date,",
						"          LICENSE_NUMBER as string,",
						"          ANIMAL_NAME as string,",
						"          SPECIES as string,",
						"          PRIMARY_BREED as string,",
						"          SECONDARY_BREED as string,",
						"          ZIP_CODE as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> source1",
						"source(output(",
						"          LOCATION_SK as string,",
						"          STATE as string,",
						"          STATE_ABBR as string,",
						"          ZIP_CODE as string,",
						"          CITY as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceLocation",
						"source(output(",
						"          BREED_SK as string,",
						"          START_DT as string,",
						"          END_DT as string,",
						"          IS_CURRENT as string,",
						"          BREED_DK as string,",
						"          SPECIES_NAME as string,",
						"          PRIMARY_BREED_NAME as string,",
						"          SECONDARY_BREED_NAME as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceBreed",
						"source(output(",
						"          DT as string,",
						"          ABRV_DAY_NAME as string,",
						"          MONTH_NAME as string,",
						"          START_DAY_OF_MONTH as string,",
						"          END_DAY_OF_MONTH as string,",
						"          QUARTER_NUM as string,",
						"          DAY_OF_WEEK as string,",
						"          IS_WEEKEND as string,",
						"          YEAR_NUM as string,",
						"          MONTH_NUM as string,",
						"          DAY_NUM as string,",
						"          DATE_DIM_SK as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceDate",
						"source(output(",
						"          MAX_LIC as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: 'SELECT NVL(MAX(PET_LIC_SK),0) AS MAX_LIC FROM PET_SCHEMA.PET_LIC_FCT',",
						"     format: 'query') ~> sourceFact",
						"source1, sourceLocation join(source1@ZIP_CODE == sourceLocation@ZIP_CODE,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1, sourceBreed join(PRIMARY_BREED == PRIMARY_BREED_NAME",
						"     && SECONDARY_BREED == SECONDARY_BREED_NAME",
						"     && SPECIES == SPECIES_NAME,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2, sourceDate join(LICENSE_ISSUE_DATE == toDate(DT, 'MMMM dd yyyy'),",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3, sourceFact join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 select(mapColumn(",
						"          LOCATION_SK,",
						"          PET_LIC_SK = MAX_LIC,",
						"          DATE_DIM_SK,",
						"          BREED_SK,",
						"          DI_JOB_ID = sourceLocation@DI_JOB_ID,",
						"          DI_LOAD_DT = sourceLocation@DI_LOAD_DT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 keyGenerate(output(ROW_NUM as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(PET_LIC_SK = PET_LIC_SK + ROW_NUM) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PET_LIC_SK as string,",
						"          DATE_SK as string,",
						"          LOCATION_SK as string,",
						"          BREED_SK as string,",
						"          LIC_NUM as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          PET_LIC_SK,",
						"          DATE_SK = DATE_DIM_SK,",
						"          LOCATION_SK,",
						"          BREED_SK,",
						"          DI_JOB_ID,",
						"          DI_LOAD_DT",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SnowflakeTable_Pet_Dataflow')]",
				"[concat(variables('factoryId'), '/datasets/SnowflakeTable_Location')]",
				"[concat(variables('factoryId'), '/datasets/SnowflakeTable_Breed')]",
				"[concat(variables('factoryId'), '/datasets/SnowflakeTable2')]",
				"[concat(variables('factoryId'), '/datasets/SnowflakeTable3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LOCATION_DIM')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "LocationDelimetedText",
								"type": "DatasetReference"
							},
							"name": "SourceGeoFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SnowflakeTable_Location",
								"type": "DatasetReference"
							},
							"name": "sinkLocationDIM"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     DI_JOB_ID as string (uuid())",
						"}",
						"source(output(",
						"          state_fips as short,",
						"          state as string,",
						"          state_abbr as string,",
						"          zipcode as string,",
						"          county as string,",
						"          city as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceGeoFile",
						"SourceGeoFile keyGenerate(output(SK_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(DI_LOAD_DT = currentTimestamp(),",
						"          DI_JOB_ID = uuid()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LOCATION_SK as string,",
						"          STATE as string,",
						"          STATE_ABBR as string,",
						"          ZIP_CODE as string,",
						"          CITY as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     stageInsert: true,",
						"     mapColumn(",
						"          DI_JOB_ID,",
						"          CITY = city,",
						"          LOCATION_SK = SK_ID,",
						"          ZIP_CODE = zipcode,",
						"          STATE = state,",
						"          STATE_ABBR = state_abbr,",
						"          DI_LOAD_DT",
						"     )) ~> sinkLocationDIM"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LocationDelimetedText')]",
				"[concat(variables('factoryId'), '/datasets/SnowflakeTable_Location')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pet_Lic_DataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText_PetDataFlow",
								"type": "DatasetReference"
							},
							"name": "FileSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SnowflakeTable_Pet_Dataflow",
								"type": "DatasetReference"
							},
							"name": "PetSinkSnowflake"
						}
					],
					"transformations": [
						{
							"name": "TransposeColumns"
						},
						{
							"name": "PickRequiredColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Job_ID as string (\"10\")",
						"}",
						"source(output(",
						"          {License Issue Date} as string,",
						"          {License Number} as string,",
						"          {Animal's Name} as string,",
						"          Species as string,",
						"          {Primary Breed} as string,",
						"          {Secondary Breed} as string,",
						"          {ZIP Code} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FileSource",
						"FileSource derive(License_Number = toInteger(translate({License Number},'S','')),",
						"          License_Issue_Date = toDate({License Issue Date}, 'MMMMM dd yyyy','en-US'),",
						"          Species = upper(Species),",
						"          {Animal's_Name} = translate({Animal's Name}, '()[]',''),",
						"          Secondary_Breed = iifNull({Secondary Breed}, 'Unknown'),",
						"          ZIP_Code = lpad(toString({ZIP Code}), 5,'0'),",
						"          Job_ID = $Job_ID,",
						"          Job_Dt = currentDate()) ~> TransposeColumns",
						"TransposeColumns select(mapColumn(",
						"          License_Issue_Date,",
						"          License_Number,",
						"          Species,",
						"          {Animal's_Name},",
						"          {Primary Breed},",
						"          Secondary_Breed,",
						"          ZIP_Code,",
						"          Job_ID,",
						"          Job_Dt",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> PickRequiredColumns",
						"PickRequiredColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LICENSE_ISSUE_DATE as string,",
						"          LICENSE_NUMBER as string,",
						"          ANIMAL_NAME as string,",
						"          SPECIES as string,",
						"          PRIMARY_BREED as string,",
						"          SECONDARY_BREED as string,",
						"          ZIP_CODE as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          LICENSE_ISSUE_DATE = License_Issue_Date,",
						"          LICENSE_NUMBER = License_Number,",
						"          ANIMAL_NAME = {Animal's_Name},",
						"          SPECIES = Species,",
						"          PRIMARY_BREED = {Primary Breed},",
						"          SECONDARY_BREED = Secondary_Breed,",
						"          ZIP_CODE = ZIP_Code,",
						"          DI_JOB_ID = Job_ID,",
						"          DI_LOAD_DT = Job_Dt",
						"     )) ~> PetSinkSnowflake"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText_PetDataFlow')]",
				"[concat(variables('factoryId'), '/datasets/SnowflakeTable_Pet_Dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText4",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "NYPD",
								"type": "DatasetReference"
							},
							"name": "Output"
						}
					],
					"transformations": [
						{
							"name": "NULLCLEAR"
						},
						{
							"name": "DateFormat",
							"description": "Creating/updating the columns 'ARREST_KEY, ARREST_DATE, PD_CD, "
						}
					],
					"scriptLines": [
						"source(output(",
						"          ARREST_KEY as string,",
						"          ARREST_DATE as string,",
						"          PD_CD as string,",
						"          PD_DESC as string,",
						"          KY_CD as string,",
						"          OFNS_DESC as string,",
						"          LAW_CODE as string,",
						"          LAW_CAT_CD as string,",
						"          ARREST_BORO as string,",
						"          ARREST_PRECINCT as string,",
						"          JURISDICTION_CODE as string,",
						"          AGE_GROUP as string,",
						"          PERP_SEX as string,",
						"          PERP_RACE as string,",
						"          X_COORD_CD as string,",
						"          Y_COORD_CD as string,",
						"          Latitude as string,",
						"          Longitude as string,",
						"          {New Georeferenced Column} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(PD_CD = iif(isNull(PD_CD), '-1', PD_CD),",
						"          OFNS_DESC = iif(equals(OFNS_DESC, '(null)'), 'UNKNOWN', OFNS_DESC),",
						"          PD_DESC = iif(equals(PD_DESC, '(null)'), 'UNKNOWN', PD_DESC),",
						"          KY_CD = iif(isNull(KY_CD), '-1', KY_CD),",
						"          Longitude = iif(isNull(Longitude), '-1.0', Longitude),",
						"          Latitude = iif(isNull(Latitude), '-1.0', Latitude),",
						"          {New Georeferenced Column} = iif(isNull({New Georeferenced Column}), 'UNKNOWN', {New Georeferenced Column})) ~> NULLCLEAR",
						"NULLCLEAR derive(ARREST_DATE = toString((toDate(ARREST_DATE, 'MM/dd/yyyy')))) ~> DateFormat",
						"DateFormat sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ARREST_KEY as string,",
						"          ARREST_DATE as string,",
						"          PD_CD as string,",
						"          PD_DESC as string,",
						"          KY_CD as string,",
						"          OFFENSE_DESCRIPTION as string,",
						"          LAW_CODE as string,",
						"          LAW_CAT_CD as string,",
						"          BOROUGH as string,",
						"          PRECINCT as string,",
						"          JURISDICTION_CODE as string,",
						"          AGE_GROUP as string,",
						"          SEX as string,",
						"          RACE as string,",
						"          X_COORD as string,",
						"          Y_COORD as string,",
						"          LATITUDE as string,",
						"          LONGITUDE as string,",
						"          NEW_GEOREFERENCED_ID as string,",
						"          DT_JOB_ID as string,",
						"          DT_JOB_DATE as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          ARREST_KEY,",
						"          ARREST_DATE,",
						"          PD_CD,",
						"          PD_DESC,",
						"          KY_CD,",
						"          OFFENSE_DESCRIPTION = OFNS_DESC,",
						"          LAW_CODE,",
						"          LAW_CAT_CD,",
						"          BOROUGH = ARREST_BORO,",
						"          PRECINCT = ARREST_PRECINCT,",
						"          JURISDICTION_CODE,",
						"          AGE_GROUP,",
						"          SEX = PERP_SEX,",
						"          RACE = PERP_RACE,",
						"          X_COORD = X_COORD_CD,",
						"          Y_COORD = Y_COORD_CD,",
						"          LATITUDE = Latitude,",
						"          LONGITUDE = Longitude,",
						"          NEW_GEOREFERENCED_ID = {New Georeferenced Column}",
						"     )) ~> Output"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText4')]",
				"[concat(variables('factoryId'), '/datasets/NYPD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeTable3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Snowflake2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [
					{
						"name": "PET_LIC_SK",
						"type": "NUMBER",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "DATE_SK",
						"type": "NUMBER",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "LOCATION_SK",
						"type": "NUMBER",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "BREED_SK",
						"type": "NUMBER",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "LIC_NUM",
						"type": "VARCHAR"
					},
					{
						"name": "DI_JOB_ID",
						"type": "VARCHAR"
					},
					{
						"name": "DI_LOAD_DT",
						"type": "DATE"
					}
				],
				"typeProperties": {
					"schema": "PET_SCHEMA",
					"table": "PET_LIC_FCT"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Snowflake2')]"
			]
		}
	]
}